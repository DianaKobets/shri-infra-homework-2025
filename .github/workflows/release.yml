name: Release Flow

on:
  workflow_dispatch:

env:
  IMAGE_NAME: cr.yandex/${{ secrets.REESTR_ID }}/app

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        job: [lint, test]
    name: Run ${{ matrix.job }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 22
      - run: npm ci
      - run: npm run ${{ matrix.job }}

  release:
    runs-on: ubuntu-latest
    needs: lint-and-test
    env:
      VERSION: ${{ github.run_number }}
      IMAGE_NAME: cr.yandex/${{ secrets.REESTR_ID }}/app
    steps:
      - uses: actions/checkout@v3

      - name: Setup Git user
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Create and push release branch
        run: |
          git checkout -b releases/${VERSION}
          git push origin releases/${VERSION}

      - name: Docker login to Yandex Container Registry
        run: echo "${{ secrets.YC_IAM_TOKEN }}" | docker login --username iam --password-stdin cr.yandex

      - name: Build and push Docker images
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.VERSION }} .
          docker tag ${{ env.IMAGE_NAME }}:${{ env.VERSION }} ${{ env.IMAGE_NAME }}:${{ env.VERSION }}_latest
          docker push ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          docker push ${{ env.IMAGE_NAME }}:${{ env.VERSION }}_latest

      - name: Create and push git tag
        run: |
          git tag ${VERSION}
          git push origin ${VERSION}

      - name: Get previous release tag
        id: prev_tag
        run: |
          git fetch --tags
          PREV_TAG=$(git tag --sort=-creatordate | grep -E '^[0-9]+$' | sed -n 2p || echo "")
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Generate commit list for changelog
        id: changelog
        run: |
          if [ -z "${{ steps.prev_tag.outputs.PREV_TAG }}" ]; then
            COMMITS=$(git log --oneline)
          else
            COMMITS=$(git log ${{ steps.prev_tag.outputs.PREV_TAG }}..HEAD --oneline)
          fi
          echo "COMMITS<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG.md
        run: |
          echo "## Версия ${VERSION} - $(date +'%Y-%m-%d')" > TEMP_CHANGELOG
          echo "${{ steps.changelog.outputs.COMMITS }}" >> TEMP_CHANGELOG
          echo "" >> TEMP_CHANGELOG
          cat CHANGELOG.md >> TEMP_CHANGELOG
          mv TEMP_CHANGELOG CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "Update changelog for release ${VERSION}"
          git push origin releases/${VERSION}

          cp CHANGELOG.md CHANGELOG_RELEASE.md
          git checkout main
          git pull origin main
          mv CHANGELOG_RELEASE.md CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "Update changelog for release ${VERSION}"
          git push origin main

      - name: Generate release issue content
        run: |
          echo "**Версия**: ${VERSION}" > .github/release-template.md
          echo "**Дата**: $(date +'%Y-%m-%d')" >> .github/release-template.md
          echo "**Автор релиза**: ${{ github.actor }}" >> .github/release-template.md
          echo "**Коммиты с предыдущего релиза:**" >> .github/release-template.md
          echo "${{ steps.changelog.outputs.COMMITS }}" >> .github/release-template.md
          echo "**Docker-образ**: ${IMAGE_NAME}:${VERSION}" >> .github/release-template.md

      - name: Create GitHub Issue
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "Релиз версии ${VERSION}"
          content-filepath: .github/release-template.md
          labels: release
